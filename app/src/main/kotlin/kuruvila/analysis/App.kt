/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kuruvila.analysis

import com.github.javaparser.JavaParser
import com.github.javaparser.ParserConfiguration
import com.github.javaparser.ast.Modifier.Keyword
import com.github.javaparser.ast.Node
import com.github.javaparser.ast.NodeList
import com.github.javaparser.ast.expr.AssignExpr
import com.github.javaparser.ast.expr.BinaryExpr
import com.github.javaparser.ast.expr.Expression
import com.github.javaparser.ast.expr.UnaryExpr
import com.github.javaparser.ast.stmt.SwitchEntry
import com.github.javaparser.ast.type.ArrayType
import com.github.javaparser.ast.type.PrimitiveType
import com.github.javaparser.resolution.TypeSolver
import com.github.javaparser.resolution.model.typesystem.LazyType
import com.github.javaparser.symbolsolver.JavaSymbolSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.JarTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver
import kuruvila.analysis.gradle.Gradle
import java.lang.reflect.Method
import java.nio.file.Path
import java.sql.DriverManager
import java.util.*
import kotlin.collections.ArrayDeque


data class NodeInfo(val node: Node, val parentPropertyId: Int)

/*
compilation units: path, hash
 */
fun main() {

    DriverManager.getConnection("jdbc:sqlite:sample.db").use { connection ->
        val codeDb = CodeDb(connection)
        connection.autoCommit = false
        codeDb.initialize()
        connection.commit()
        val project = Gradle(Path.of("/Users/sidharth/code/understanging-java"))
        for (module in project.modules()) {
            val reflectionTypeSolver: TypeSolver = ReflectionTypeSolver()
            val javaParserTypeSolvers = module.sources.map { JavaParserTypeSolver(it) }
            val jarTypeSolvers = module.jars.map { JarTypeSolver(it) }
            val typeSolver = CombinedTypeSolver()
            typeSolver.add(reflectionTypeSolver)
            for (ts in javaParserTypeSolvers) {
                typeSolver.add(ts)
            }
            for (ts in jarTypeSolvers) {
                typeSolver.add(ts)
            }
            val symbolSolver = JavaSymbolSolver(typeSolver)
            val config = ParserConfiguration()
            config.setSymbolResolver(symbolSolver)
            val jp = JavaParser(config)
            val astExtractor = AstExtractor(codeDb, jp)

            println(project.modules())

            for (file in module.allJavaSourceFiles()) {
                println(file)
                astExtractor.extractFile(file)
                connection.commit()
            }

            val classHierarchyBuilder = ClassHierarchyBuilder(jp, module.allJavaSourceFiles(), codeDb)
            classHierarchyBuilder.build()
        }

    }
}




